package com.srplab.wrapandroid;

import android.app.Activity;
import android.os.Bundle;
import android.content.Context;
import android.content.res.AssetManager;
import android.widget.*;
import android.view.*;
import android.widget.LinearLayout;
import android.widget.AbsoluteLayout.LayoutParams;
import android.util.*;
import android.widget.RadioGroup.OnCheckedChangeListener;
import android.net.Uri;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import java.util.Stack;

import com.srplab.www.starcore.*;

/**
 * 
 * @author srplab
 *
 */

public class ViewGroupClass{
	/**
	 * @note do not call Init method directly
	 */	
	static public boolean Init(StarServiceClass In_Service,StarSrvGroupClass In_SrvGroup,boolean In_DumpInformationFlag){
		final StarSrvGroupClass SrvGroup = In_SrvGroup;
		final StarServiceClass Service = In_Service;	
		final boolean DumpInformationFlag = In_DumpInformationFlag;
		WrapAndroidClass.DumpInformation(SrvGroup, DumpInformationFlag, "init ViewGroupClass");
		
        /* ViewGroupClass Body */
        Service._GetObject("ViewGroupClass")._Assign(new StarObjectClass(){
        	/* _OnCreate Event */
        	public Object[] _OnCreate(Hashtable Ev){
        		StarObjectClass self = (StarObjectClass)Ev.get("_DesObject");        		        		
			    /*set event for View*/
        		TimePicker view = (TimePicker)WrapAndroidClass.GetAndroidObject(self,"AndroidObject");
            	/**
            	 * <div class="memproto">
            	 *   <table class="memname">
            	 *     <tr><td class="memname">Event : onTimeChanged(Hashtable Ev, int hourOfDay, int minute) </td></tr>
            	 *   </table>
            	 * </div>
            	 */        		
		    	view.setOnTimeChangedListener(new TimePicker.OnTimeChangedListener(){ 
		    		public void  onTimeChanged(TimePicker view, int hourOfDay, int minute)   {
		    			StarObjectClass self = ((BasicAndroidInterface)view).getBasicAndroid().getStarObject();
		    			self._ProcessEvent("onTimeChanged",hourOfDay,minute);
		    		} 
		    	});
			    WrapAndroidClass.DumpInformation(SrvGroup, DumpInformationFlag, "starobject : "+self+" is created");
			    return null;
        	}         	
        	/* onCreateAndroid function */
        	public void onCreateAndroid( StarObjectClass self ){
        		StarObjectClass parent = (StarObjectClass)self._Get("_Parent");
        		StarObjectClass activity = (StarObjectClass)self._Call("getActivity");        		
        		StarCLETimePicker button = new StarCLETimePicker((Activity)WrapAndroidClass.GetAndroidObject(activity,"AndroidObject"),self);        		
        		WrapAndroidClass.SetAndroidObject(self,"AndroidObject",(Object)button);
        		if( parent != null ){
        			if( activity == parent ){
        				Activity android_activity = (Activity)WrapAndroidClass.GetAndroidObject(parent,"AndroidObject");
        				android_activity.setContentView(button);
        			}else{
        				ViewGroup android_viewgroup = (ViewGroup)WrapAndroidClass.GetAndroidObject(parent,"AndroidObject");
        				android_viewgroup.addView(button);
        			}
        			self._LockGC();
        			self._Call("decAndroidRef");  // release with parent
        		}
        		return;
        	}        	
        	/**
        	 * <div class="memproto">
        	 *   <table class="memname">
        	 *     <tr><td class="memname">public void setCurrentHour(StarObjectClass self,int currentHour) </td></tr>
        	 *   </table>
        	 * </div>
        	 */
        	public void setCurrentHour(StarObjectClass self,int currentHour){
        		StarObjectClass activity = (StarObjectClass)self._Call("getActivity");
        		StarObjectClass parent = (StarObjectClass)self._Get("_Parent");
        		if( parent != null && parent == activity )
        			return;  //may be content view        		
        		TimePicker view = (TimePicker)WrapAndroidClass.GetAndroidObject(self,"AndroidObject");
        		if( view != null )
        			view.setCurrentHour(currentHour);
        	}    
        	
        	/**
        	 * <div class="memproto">
        	 *   <table class="memname">
        	 *     <tr><td class="memname">public void setCurrentMinute(StarObjectClass self,int currentMinute) </td></tr>
        	 *   </table>
        	 * </div>
        	 */
        	public void setCurrentMinute(StarObjectClass self,int currentMinute){
        		StarObjectClass activity = (StarObjectClass)self._Call("getActivity");
        		StarObjectClass parent = (StarObjectClass)self._Get("_Parent");
        		if( parent != null && parent == activity )
        			return;  //may be content view        		
        		TimePicker view = (TimePicker)WrapAndroidClass.GetAndroidObject(self,"AndroidObject");
        		if( view != null )
        			view.setCurrentMinute(currentMinute);
        	}   

        	/**
        	 * <div class="memproto">
        	 *   <table class="memname">
        	 *     <tr><td class="memname">public void setIs24HourView(StarObjectClass self,boolean is24HourView) </td></tr>
        	 *   </table>
        	 * </div>
        	 */
        	public void setIs24HourView(StarObjectClass self,boolean is24HourView){
        		StarObjectClass activity = (StarObjectClass)self._Call("getActivity");
        		StarObjectClass parent = (StarObjectClass)self._Get("_Parent");
        		if( parent != null && parent == activity )
        			return;  //may be content view        		
        		TimePicker view = (TimePicker)WrapAndroidClass.GetAndroidObject(self,"AndroidObject");
        		if( view != null )
        			view.setIs24HourView(is24HourView);
        	}   
        	
        	/**
        	 * <div class="memproto">
        	 *   <table class="memname">
        	 *     <tr><td class="memname">public int getCurrentHour(StarObjectClass self) </td></tr>
        	 *   </table>
        	 * </div>
        	 */
        	public int getCurrentHour(StarObjectClass self){
        		StarObjectClass activity = (StarObjectClass)self._Call("getActivity");
        		StarObjectClass parent = (StarObjectClass)self._Get("_Parent");
        		if( parent != null && parent == activity )
        			return 0;  //may be content view        		
        		TimePicker view = (TimePicker)WrapAndroidClass.GetAndroidObject(self,"AndroidObject");
        		if( view != null )
        			return view.getCurrentHour();
        		return 0;
        	}   

        	/**
        	 * <div class="memproto">
        	 *   <table class="memname">
        	 *     <tr><td class="memname">public int getCurrentMinute(StarObjectClass self) </td></tr>
        	 *   </table>
        	 * </div>
        	 */
        	public int getCurrentMinute(StarObjectClass self){
        		StarObjectClass activity = (StarObjectClass)self._Call("getActivity");
        		StarObjectClass parent = (StarObjectClass)self._Get("_Parent");
        		if( parent != null && parent == activity )
        			return 0;  //may be content view        		
        		TimePicker view = (TimePicker)WrapAndroidClass.GetAndroidObject(self,"AndroidObject");
        		if( view != null )
        			return view.getCurrentMinute();
        		return 0;
        	}   
        	
        	/**
        	 * <div class="memproto">
        	 *   <table class="memname">
        	 *     <tr><td class="memname">public boolean is24HourView(StarObjectClass self) </td></tr>
        	 *   </table>
        	 * </div>
        	 */
        	public boolean is24HourView(StarObjectClass self){
        		StarObjectClass activity = (StarObjectClass)self._Call("getActivity");
        		StarObjectClass parent = (StarObjectClass)self._Get("_Parent");
        		if( parent != null && parent == activity )
        			return false;  //may be content view        		
        		TimePicker view = (TimePicker)WrapAndroidClass.GetAndroidObject(self,"AndroidObject");
        		if( view != null )
        			return view.is24HourView();
        		return false;
        	}           	
        });    
        
		return true;
	}	
}